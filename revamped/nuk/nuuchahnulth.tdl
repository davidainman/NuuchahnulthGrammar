;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Nuuchahnulth
;;; created at:
;;;     Tue Mar 05 01:01:33 UTC 2019
;;; based on Matrix customization system version of:
;;;     Tue Nov 13 21:13:22 UTC 2018
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

;;; 2019-03-12 removing PRD - already defined in GM (!)
;;; 2019-03-19 adding AUX-RAISE bool to avoid looping
head :+ [ PRON bool,
    AUX bool,
    AUX-RAISE bool,
    NMZ bool,
    POSSESSOR poss,
    INIT bool,
    SPEC-INIT bool,
    FORM form ].

root := form.
non-root := form.
root-finite := root & finite.
root-nonfinite := root & nonfinite.
non-root-finite := non-root & finite.
non-root-nonfinite := non-root & nonfinite.

root-form := word-or-lexrule & [ SYNSEM.LOCAL.CAT.HEAD.FORM root ].
non-root-form := word-or-lexrule & [ SYNSEM.LOCAL.CAT.HEAD.FORM non-root ].

;;; 2019-04-04 Root to non-root and non-root to root

root-to-non-root-lex-rule := lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                            AUX #aux,
                            AUX-RAISE #aux-raise,
                            NMZ #nmz,
                            POSSESSOR #poss,
                            INIT #init,
                            SPEC-INIT #spec-init,
                            MOD #mod,
                            PRD #prd,
                            KEYS #keys,
                            FORM non-root ],
    DTR.SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                                AUX #aux,
                                AUX-RAISE #aux-raise,
                                NMZ #nmz,
                                POSSESSOR #poss,
                                INIT #init,
                                SPEC-INIT #spec-init,
                                MOD #mod,
                                PRD #prd,
                                KEYS #keys,
                                FORM root ] ].

non-root-to-root-lex-rule := lex-rule &
  [ SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                            AUX #aux,
                            AUX-RAISE #aux-raise,
                            NMZ #nmz,
                            POSSESSOR #poss,
                            INIT #init,
                            SPEC-INIT #spec-init,
                            MOD #mod,
                            PRD #prd,
                            KEYS #keys,
                            FORM root ],
    DTR.SYNSEM.LOCAL.CAT.HEAD [ PRON #pron,
                                AUX #aux,
                                AUX-RAISE #aux-raise,
                                NMZ #nmz,
                                POSSESSOR #poss,
                                INIT #init,
                                SPEC-INIT #spec-init,
                                MOD #mod,
                                PRD #prd,
                                KEYS #keys,
                                FORM non-root ] ].

;;; 2019-03-13 I need a type of list that is either POSTHEAD + or empty

phlist := list.

phcons := phlist & cons &
  [ FIRST synsem-min & [ LOCAL.CAT.POSTHEAD + ],
    REST  phlist ].

; 2019-03-30 NB: Needs to inherit from olist because null is also optional :)
phnull := phlist & null & olist.

;;; 2019-03-06 adding perfective values to aspect

aspect :+ [ PERF bool ].

lex-or-phrase-synsem :+ [ INFOSTR-FLAG luk ].

; 2019-03-22 making sure that the subj is not an adv with MOD < >
decl-head-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM [ INFOSTR-FLAG -,
                                                                        LOCAL.CAT.HEAD.MOD < > ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-2nd-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG -, NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

basic-head-opt-subj-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

; 2019-03-22 restricting daughter to be subj empty so this applies last (spurious ambiguity)
basic-head-opt-comp-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].
; Removing this as it is making dropping impossible!
;                                HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SUBJ < > ].

basic-head-mod-phrase-simple :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-head-spec-phrase :+ [ SYNSEM.INFOSTR-FLAG - ].

basic-bare-np-phrase :+ [ SYNSEM.INFOSTR-FLAG -, HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

coord-phrase :+ [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    LCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    RCOORD-DTR.SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz ].

unary-bottom-coord-rule :+ [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz,
    ARGS < [ SYNSEM.LOCAL.CAT.HEAD.NMZ #nmz ] > ].

inflected :+ [ CONTINUATIVE-FORM-FLAG luk,
    ITERATIVE-FORM-FLAG luk,
    MOMENTANEOUS-FORM-FLAG luk,
    REPETITIVE-FORM-FLAG luk,
    INCEPTIVE-FORM-FLAG luk,
    INCEPTIVE-COMPLEX-FLAG luk,
    ASPECT-2-FLAG luk,
    MOMENTANEOUS-COMPLEX-FLAG luk,
    DURATIVE-FORM-FLAG luk,
    PRE-CLITIC-PAST-FLAG luk,
    ASPECT-1-FLAG luk,
    SOME-INFLECTION luk,
    INCORPORATION-FLAG luk ].

infl-satisfied :+ [ CONTINUATIVE-FORM-FLAG na-or-+,
    ITERATIVE-FORM-FLAG na-or-+,
    MOMENTANEOUS-FORM-FLAG na-or-+,
    REPETITIVE-FORM-FLAG na-or-+,
    INCEPTIVE-FORM-FLAG na-or-+,
    INCEPTIVE-COMPLEX-FLAG na-or-+,
    ASPECT-2-FLAG na-or-+,
    MOMENTANEOUS-COMPLEX-FLAG na-or-+,
    DURATIVE-FORM-FLAG na-or-+,
    PRE-CLITIC-PAST-FLAG na-or-+,
    ASPECT-1-FLAG na-or-+,
    SOME-INFLECTION na-or-+,
    INCORPORATION-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

cat :+ [ POSSESSUM poss ].

poss := *top* &
  [ POSS-AGR png ].

basic-bare-np-phrase :+ [ SYNSEM.LOCAL.CAT [ VAL.SPEC < >,
                       HEAD #head,
                       POSSESSUM #possessum ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD #head,
                                POSSESSUM #possessum & nonpossessive ] ].

basic-head-1st-comp-phrase :+ [ SYNSEM.LOCAL.CAT.POSSESSUM #poss,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

basic-determiner-lex :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR nonpossessive,
                       POSSESSUM nonpossessive ] ].

top-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

mid-coord-rule :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    RCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ],
    LCOORD-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                  POSSESSUM #possessum ] ].

bottom-coord-phrase :+ [ SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                       POSSESSUM #possessum ],
    NONCONJ-DTR.SYNSEM.LOCAL.CAT [ HEAD.POSSESSOR #possessor,
                                   POSSESSUM #possessum ] ].

;;; 2019-03-09 opt subj & comp should only apply to finite verbs (i.e., with the clitic attached)
;;; 2019-03-09 should only be compatible with things headed by AUX
;;; 2019-04-01 constraining daughter to have no SLASH
nuk-head-opt-subj-phrase := decl-head-opt-subj-phrase &
[ HEAD-DTR.SYNSEM [ LOCAL.CAT [ HEAD [ FORM finite,
                                      AUX + ],
                                VAL.SUBJ < synsem-min > ],
                    NON-LOCAL.SLASH <! !> ] ].

nuk-head-opt-subj-imp-phrase := imp-head-opt-subj-phrase &
[ HEAD-DTR.SYNSEM [ LOCAL.CAT.HEAD [ FORM finite,
                                   AUX + ],
                    NON-LOCAL.SLASH <! !> ] ].

nuk-head-opt-comp-phrase := basic-head-opt-comp-phrase &
[ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.FORM finite ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Person

person := *top*.
1st := person.
2nd := person.
3rd := person.

;;; Number

number := *top*.
singular := number.
plural := number.

;;; Possession

possession := *top*.
possessive := poss.  ; supertype for possessive features
nonpossessive := poss.  ; type for nonpossessive
possessor := possessive.
possessum := possessive.
possessive-1 := possessive.  ; supertype for strategy 1
possessor-1 := possessor & possessive-1.
possessum-1 := possessum & possessive-1.

;;; Possession

possessive-2 := possessive.  ; supertype for strategy 2
possessor-2 := possessor & possessive-2.
possessum-2 := possessum & possessive-2.

;;; Form

form := *top*.
nonfinite := form.
finite := form.
finite-aux := nonfinite.

;;; Tense

past := tense.
future := tense.

;;; Aspect

meaning := aspect.
habitual := aspect.
xperf := aspect.
perfective := xperf & [ PERF + ].
imperfective := xperf & [ PERF - ].
momentaneous := meaning.
inceptive := meaning.
continuative := meaning.
durative := meaning.
repetitive := meaning.
iterative := meaning.
MO := momentaneous & perfective.
IN := continuative & perfective.
CT := continuative & imperfective.
DR := durative & imperfective.
RP := repetitive & imperfective.
IT := iterative & imperfective.
MO-GRAD := momentaneous & imperfective.
IN-GRAD := inceptive & imperfective.
start := meaning.
MO-GRAD-PF := MO & start.
IN-GRAD-PF := IN & start.
DR-PF := durative & perfective.
RP-PF := repetitive & perfective.
IT-PF := iterative & perfective.

;;; 2019-03-06 habitual forms of every aspect
MO-HABIT := MO & habitual.
IN-HABIT := IN & habitual.
CT-HABIT := CT & habitual.
DR-HABIT := DR & habitual.
RP-HABIT := RP & habitual.
IT-HABIT := IT & habitual.
MO-GRAD-HABIT := MO-GRAD & habitual.
IN-GRAD-HABIT := IN-GRAD & habitual.
MO-GRAD-PF-HABIT := MO-GRAD-PF & habitual.
IN-GRAD-PF-HABIT := IN-GRAD-PF & habitual.
DR-PF-HABIT := DR-PF & habitual.
RP-PF-HABIT := RP-PF & habitual.
IT-PF-HABIT := IT-PF & habitual.


;;; Mood

strong-real := mood.
weak := mood.
neutral := mood.
unknown := mood.
possible := mood.
hearsay := mood.
inferential := mood.
purposive := mood.
dubitative := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

predicate-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.PRD + ].

non-predicate-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.PRD - ].

main-clause-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.MC + ].

subordinate-clause-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.MC - ].

;;; Nouns

;;; 2019-03-12 making the ARG1 the XARG
nuk-basic-noun-lex := norm-sem-lex-item & basic-icons-lex-item & 
  [ SYNSEM [ LOCAL [ CAT.HEAD noun & [ AUX - ],
                     CONT.HOOK.XARG #xarg ],
             LKEYS.KEYREL arg1-ev-relation & [ ARG1 #xarg ] ],
    INFLECTED infl-satisfied ].

;;; 2019-03-12 nouns are events with subjects.
noun-lex := nuk-basic-noun-lex & no-hcons-lex-item & non-mod-lex-item & predicate-lex & 
  [ ARG-ST < #subj & 
             [ LOCAL [ CAT cat-sat & [ VAL [ SPR < >,
                                             COMPS < > ]],
                       CONT.HOOK.INDEX #xarg ]] >,
    SYNSEM.LOCAL [ CAT [ VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < #subj >,
                               SPEC < > ],
                         HEAD [ NMZ -,
                                POSSESSOR nonpossessive ],
                         POSSESSUM nonpossessive ],
                   CONT.HOOK.XARG #xarg ] ].

;;; 2019-03-12 the article is no longer a spr
;;; adding 3rd person information to common nouns
;no-spr-noun-lex := noun-lex &
;  [ SYNSEM.LOCAL.CAT.VAL.SPR < [ OPT + ] > ].

; 2019-04-03 this is blocking things like "I was a child"!!!!
;common-noun-noun-lex := noun-lex.

common-noun-word-and-root-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM root ].


common-noun-word-and-non-root-lex := noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM non-root ].

;  [ SYNSEM.LOCAL.CONT.HOOK.XARG.PNG.PER 3rd ].

;;; 2019-03-12 This should actually be the "normal" noun-lex!
;;; TODO: make this PRD -
proper-noun-lex := basic-noun-lex & no-hcons-lex-item & non-mod-lex-item & predicate-lex & 
  [ ARG-ST < >,
    SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < >,
                             SPEC < > ],
                       HEAD [ NMZ -,
                              POSSESSOR nonpossessive,
                              FORM non-root ],
                       POSSESSUM nonpossessive ] ].


plural-noun-lex := common-noun-word-and-non-root-lex &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

;;; 2019-03-12 Should probably rename this from proper-noun but they are similar in nuk
pronoun-pred-noun-lex := proper-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

pronoun-pred-1pl-noun-lex := pronoun-pred-noun-lex.

;;; 2019-03-12 Should probably rename this from proper-noun but they are similar in nuk
pronoun-doto-noun-lex := proper-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

pronoun-doto-1pl-noun-lex := proper-noun-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.PRON + ].

pronoun-pred-2sg-noun-lex := pronoun-pred-noun-lex.

possessum-noun-lex-1 := basic-one-arg &
  [ ARG-ST < #comps >,
    SYNSEM.LOCAL [ CONT [ RELS <!  !>,
                          HCONS <!  !>,
                          HOOK #hook,
                          ICONS <!  !> ],
                   CAT [ VAL [ SUBJ < >,
                               COMPS < #comps &
                                       [ LOCAL [ CONT.HOOK #hook,
                                                 CAT [ POSSESSUM nonpossessive,
                                                       VAL.SPR < [ ] >,
                                                       HEAD #head &
                                                            [ PRON -,
                                                              POSSESSOR nonpossessive ] ] ] ] >,
                               SPR < [ LOCAL.CAT.HEAD det &
                                                      [ POSSESSOR possessor-1 ] ] > ],
                         POSSESSUM possessum-1,
                         HEAD #head & noun &
                              [ POSSESSOR nonpossessive,
                                INIT - ] ] ] ].

possessum-noun-lex-2 := basic-one-arg &
  [ ARG-ST < #comps >,
    SYNSEM.LOCAL [ CONT [ RELS <!  !>,
                          HCONS <!  !>,
                          HOOK #hook,
                          ICONS <!  !> ],
                   CAT [ VAL [ SUBJ < >,
                               COMPS < #comps &
                                       [ LOCAL [ CONT.HOOK #hook,
                                                 CAT [ POSSESSUM nonpossessive,
                                                       VAL.SPR < [ ] >,
                                                       HEAD #head &
                                                            [ PRON -,
                                                              POSSESSOR nonpossessive ] ] ] ] >,
                               SPR < [ LOCAL.CAT.HEAD det &
                                                      [ POSSESSOR possessor-2 ] ] > ],
                         POSSESSUM possessum-2,
                         HEAD #head & noun &
                              [ POSSESSOR nonpossessive,
                                INIT - ] ] ] ].

;;; Verbs

verb-lex := non-mod-lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD verb &
                          [ NMZ - ],
    INFLECTED [ CONTINUATIVE-FORM-FLAG na-or--,
                ITERATIVE-FORM-FLAG na-or--,
                MOMENTANEOUS-FORM-FLAG na-or--,
                REPETITIVE-FORM-FLAG na-or--,
                INCEPTIVE-FORM-FLAG na-or--,
                INCEPTIVE-COMPLEX-FLAG na-or--,
                DURATIVE-FORM-FLAG na-or--,
                MOMENTANEOUS-COMPLEX-FLAG na-or-- ] ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT cat-sat &
                               [ VAL [ SPR < >,
                                       COMPS < > ] ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex & root-form &
  [ SYNSEM.LOCAL.CAT.HEAD [ AUX +,
                            FORM nonfinite ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

;2019-04-01 complements should be to the right
transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT cat-sat &
                         [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun,
                           POSTHEAD + ] ] > ].

;;; 2019-03-06 Auxiliaries need to take predicates
;;; and compose their arguments
;;; TODO: Make sure that it unifies correctly, b/c
;;; emb's wambaya grammar has composition happening in
;;; the PSR - there is possibly a good reason for this
;;; TODO: Subj doesn't need to be head noun but head.prd -
;;; TODO: revisit FORM nonfinite
;2p-arg-comp-aux := lex-item &
; 2019-03-22 changing SUBJ to HEAD.PRD - not HEAD noun

2p-lex := no-icons-lex-item & no-hcons-lex-item & post-clitic-also-rule-dtr & post-clitic-plural-rule-dtr & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & pre-clitic-now-rule-dtr & pre-clitic-passive-rule-dtr & pre-clitic-poss-rule-dtr & post-clitic-habitual-lex-rule-dtr & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD [ FORM non-root-finite,
                                  AUX + ],
           VAL [ SUBJ < #subj >,
                 COMPS < #comps . #vcomps >,
                 SPR < >,
                 SPEC < > ] ] ],
             NON-LOCAL #nonlocal ],
    ARG-ST < #subj &
       [ LOCAL [ CAT [ HEAD.PRD -,
           VAL.COMPS < > ] ]],
       #comps &
       [ LIGHT +,
         L-PERIPH +,
         OPT -,
         LOCAL [ CAT [ VAL [ SUBJ < #subj >,
                             COMPS #vcomps ],
                       HEAD [ PRD +,
                              FORM nonfinite ],
                       POSTHEAD - ] ],
         NON-LOCAL #nonlocal ]> ].

2p-lex-no-rels := 2p-lex &
  [ SYNSEM.LOCAL [ CAT.HEAD.MOD < >,
                   CONT.RELS <! !> ] ].

2p-lex-no-rels-comp-xarg-raise := 2p-lex-no-rels & raise-sem-lex-item &
 [ ARG-ST < [ LOCAL.CONT.HOOK.INDEX #xarg ], [ LOCAL.CONT.HOOK.XARG #xarg ] > ].

;2p-lex-old := lex-item & 
;  [ SYNSEM [ LOCAL [ CAT [ HEAD [ AUX +,
;                                  MOD < > ],
;           VAL [ SUBJ < #subj >,
;                 COMPS < #comps . #vcomps >,
;                 SPR < >,
;                 SPEC < > ]],
;                     CONT [ RELS <! !>,
;                            HCONS <! !>,
;                            ICONS <! !> ] ],
;             NON-LOCAL #nonlocal ],
;    ARG-ST < #subj &
;       [ LOCAL [ CAT [ HEAD.PRD -,
;           VAL.COMPS < > ],
;           CONT.HOOK.INDEX #xarg ]],
;       #comps &
;       [ LIGHT +,
;         L-PERIPH +,
;         OPT -,
;         LOCAL [ CAT [ VAL [ SUBJ < #subj >,
;                             COMPS #vcomps ],
;                       HEAD [ PRD +,
;                              FORM nonfinite ],
;                       POSTHEAD - ],
;                 CONT.HOOK.XARG #xarg ],
;         NON-LOCAL #nonlocal ]> ].

;;; 2019-03-13
article-lex := 2p-lex-no-rels & non-predicate-lex & 
[ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX #index & [ PNG.PER 3rd ],
                 CONT.HOOK.INDEX #index ] ].

;;; 2019-03-09 This is for the neutral mood applying w/ no further clitic-passive-lex-rule
neutral-3rd-pred-lex-rule := local-change-only-lex-rule & same-agr-lex-rule & same-ctxt-lex-rule & predicate-lex &
  [ SYNSEM [ LOCAL [ CAT [ HEAD verb &
                             [ AUX +,
                               MOD < >,
                               FORM non-root-finite ],
                           VAL [ SUBJ < #subj & [ LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] >,
                                 COMPS #comps,
                                 SPR #spr,
                                 SPEC #spec ]],
                     CONT [ HOOK [ GTOP #gtop,
                                   LTOP #ltop,
                                   INDEX #index & [ E.MOOD neutral,
                                                    SF prop ],
                                   XARG #xarg,
                                   ICONS-KEY #ikey,
                                   CLAUSE-KEY #ckey ],
                            RELS #rels,
                            HCONS #hcons,
                            ICONS #icons ]]],
    DTR [ INFLECTED infl-satisfied,
         SYNSEM.LOCAL [ CAT [ HEAD [ PRD +,
                                     FORM nonfinite,
                                     AUX - ],
                                VAL [ SUBJ < #subj >,
                                      COMPS #comps,
                                      SPR #spr,
                                      SPEC #spec ]],
                       CONT [ HOOK [ GTOP #gtop,
                                     LTOP #ltop,
                                     INDEX #index,
                                     XARG #xarg,
                                     ICONS-KEY #ikey,
                                     CLAUSE-KEY #ckey ],
                              RELS #rels,
                              HCONS #hcons,
                              ICONS #icons ]]],
    C-CONT [ RELS <!  !>,
             HCONS <!  !>,
             ICONS <!  !> ] ].

; 2019-04-01 this type raises adverbs as if they had a neutral mood on them
neutral-3rd-pred-adv-lex-rule := local-change-only-lex-rule & same-agr-lex-rule & same-ctxt-lex-rule & predicate-lex & 
  [ SYNSEM.LOCAL [ CAT [ HEAD verb &
                             [ AUX +,
                               AUX-RAISE +,
                               MOD < >,
                               FORM non-root ],
                           VAL [ SUBJ < #subj & [ LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ] >,
                                 COMPS  < #mod & [ LIGHT +,
                                                   LOCAL [ CAT [ VAL [ SUBJ < #subj >,
                                                                       COMPS #vcomps & phlist ],
                                                                 HEAD verb & [ AUX -,
                                                                               AUX-RAISE - ],
                                                                 POSTHEAD + ],
                                                           CONT.HOOK.INDEX #index & [ E.MOOD neutral,
                                                                                      SF prop ] ],
                                                   OPT - ] . #vcomps >,
                                 SPR < >,
                                 SPEC < > ] ],
                   CONT.HOOK.INDEX #index ],
    DTR [ INFLECTED infl-satisfied,
         SYNSEM.LOCAL [ CAT [ HEAD adv & [ AUX-RAISE -,
                                           AUX -,
                                           MOD < #mod > ],
                              VAL [ SUBJ  < >,
                                    COMPS < >,
                                    SPR   < >,
                                    SPEC  < > ],
                              POSTHEAD - ] ] ],
    C-CONT [ RELS <!  !>,
             HCONS <!  !>,
             ICONS <!  !> ] ].

;;; TODO: This was generated by the GM, make sure that you
;;; don't still need it, then delete it
;2p-verb-lex := main-verb-lex & transitive-lex-item &
;  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
;    ARG-ST < [LOCAL.CAT.HEAD noun ],
;             #comps &
;             [ LOCAL.CAT cat-sat & 
;                      [ HEAD.PRD + ] ] > ].

intransitive-verb-verb-lex := main-verb-verb-lex & intransitive-verb-lex.

transitive-verb-verb-lex := main-verb-verb-lex & transitive-verb-lex.

;;; 2019-03-08 for the verbs that already have aspect & don't need more
intransitive-verb-inflected-lex := main-verb-inflected-lex & intransitive-verb-lex.

transitive-verb-inflected-lex := main-verb-inflected-lex & transitive-verb-lex.

;;;2019-03-08 adding infl satisfied to these!

durative-intransitive-verb-lex := intransitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT DR ].

perfective-intransitive-verb-lex := intransitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT MO ].

continuative-intransitive-verb-lex := intransitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT CT ].

transitive-no-inflect-verb-lex := transitive-verb-inflected-lex.

durative-transitive-verb-lex := transitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT DR ].

perfective-transitive-verb-lex := transitive-verb-inflected-lex & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT MO ].

mood-2p-verb-lex := 2p-lex-no-rels-comp-xarg-raise & predicate-lex & 
  [ SYNSEM.LOCAL.CAT [ HEAD verb,
                       VAL.SUBJ < [ LOCAL.CAT.HEAD noun ] > ] ].

;mood-strong-real-verb-lex := mood-2p-verb-lex &
;  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.MOOD strong-real ].

mood-strong-real-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD strong-real,
                                                             SF prop ],
                       MC + ] ].

;;; 2019-03-08 for the verbs that already have aspect & don't need more
main-verb-inflected-lex := main-verb-lex & non-root-form &  
  [ SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite,
    INFLECTED infl-satisfied ].

main-verb-verb-lex := root-form & verb-lex & aspect-2-rule-dtr & aspect-3-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD.FORM nonfinite,
    INFLECTED [ ASPECT-2-FLAG -,
                ASPECT-1-FLAG - ] ].

; Leaving Weak mood underspecified for main clause b/c it is both (replacing neutral) in Q dialect
mood-weak-verb-lex := mood-2p-verb-lex &  aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD weak,
                                                             SF prop ] ].

mood-neutral-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD neutral,
                                                             SF prop ] ].

mood-unknown-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD unknown,
                                                               SF prop ],
                       MC - ] ].

mood-possible-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD possible,
                                                               SF prop ],
                       MC - ] ].

mood-hearsay-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD hearsay,
                                                               SF prop ],
                       MC + ] ].

mood-inferential-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD inferential,
                                                               SF prop ],
                       MC + ] ].

mood-purposive-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD purposive,
                                                               SF prop ],
                       MC - ] ].

mood-dubitative-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX [ E.MOOD dubitative,
                                                               SF prop ],
                       MC + ] ].

mood-command-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr &
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SF comm,
                       MC + ] ].

mood-question-verb-lex := mood-2p-verb-lex & aux-type-raising-dtr & 
  [ SYNSEM.LOCAL.CAT [ VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.SF ques,
                       MC + ] ].

; 2019-04-03 this is a copy of 2p-lex & 2p-verb-lex, plus MC - 
; TODO: should unify and straighten type hierarchy later. What I did:
; I removed the #xarg matching stuff, CONT <! !> was pushed lower, and HEAD verb --> noun, HEAD PRD --> -
; Moved MOD < > lower
; Instead of inheriting from raise-sem-lex-item I inherited from no-hcons-lex-item
; I need: (1) a super type of 2p-lex-super (looks like below) that lacks CONT information, #xarg matching, & no raise-sem-lex-item
; (2) a subtype that adds empty CONT 2p-lex-no-cont 
; (3) a subtype that adds xarg matching and raise-sem-lex
; definite-when-verb inherits from (1), other definite types inherit from (2), all other from (3)
mood-definite-verb-lex-super := no-hcons-lex-item & post-clitic-also-rule-dtr & post-clitic-plural-rule-dtr & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & pre-clitic-now-rule-dtr & pre-clitic-passive-rule-dtr & pre-clitic-poss-rule-dtr & post-clitic-habitual-lex-rule-dtr & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & [ FORM finite,
                                         AUX +,
                                         PRD - ],
           VAL [ SUBJ < #subj >,
                 COMPS < #comps . #vcomps >,
                 SPR < >,
                 SPEC < > ],
             MC - ] ],
             NON-LOCAL #nonlocal ],
    ARG-ST < #subj &
       [ LOCAL [ CAT [ HEAD.PRD -,
           VAL.COMPS < > ] ]],
       #comps &
       [ LIGHT +,
         L-PERIPH +,
         OPT -,
         LOCAL [ CAT [ VAL [ SUBJ < #subj >,
                             COMPS #vcomps ],
                       HEAD [ PRD +,
                              FORM nonfinite ],
                       POSTHEAD - ] ],
         NON-LOCAL #nonlocal ]> ].

mood-definite-verb-lex-super-2 := mood-definite-verb-lex-super & 
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

; 2019-04-03 constraining this to intransitives
mood-definite-subj-raising-verb-lex := 2p-lex-no-rels & 
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS < [ LOCAL.CAT [ HEAD verb,
                                                 VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX #index ] ] >,
                   CONT.HOOK.INDEX #index ] ].

mood-definite-obj-raising-verb-lex := 2p-lex-no-rels & 
  [ SYNSEM.LOCAL [ CAT.VAL.COMPS.FIRST.LOCAL.CAT [ HEAD verb,
                                                   VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX #index ],
                   CONT.HOOK.INDEX #index ] ].

mood-definite-when-verb-lex := 2p-lex & non-predicate-lex &
  [ SYNSEM [ LOCAL [ CAT [ VAL [ COMPS.FIRST.LOCAL.CONT.HOOK.INDEX #arg0 ],
                         MC -,
                         HEAD.MOD < [ LOCAL.CONT.HOOK.INDEX #arg1 ] > ],
                   CONT [ HOOK [ INDEX #arg0,
                                 XARG #arg1,
                                 LTOP #ltop ],
                          RELS <! [ PRED "when_rel",
                                    LBL #ltop,
                                    ARG0 event & #arg0,
                                    ARG1 event & #arg1 ] !>,
                          HCONS <! !>,
                          ICONS <! !> ] ],
             NON-LOCAL.SLASH <! !> ] ].

;; original:
;; SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
;;                                                                NUM singular ]
;; TODO: Used to inherit from mood-2p-verb-lex, removed to get definite mood working
1sg-aux-verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                                          NUM singular ] ].

1pl-aux-verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 1st,
                                                                NUM plural ] ].

2sg-aux-verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM singular ] ].

2pl-aux-verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG [ PER 2nd,
                                                                NUM plural ] ].

3-aux-verb-lex := lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER 3rd ].

mood-strong-real-1sg-verb-lex := mood-strong-real-verb-lex & 1sg-aux-verb-lex.

mood-strong-real-1pl-verb-lex := mood-strong-real-verb-lex & 1pl-aux-verb-lex.

mood-strong-real-2sg-verb-lex := mood-strong-real-verb-lex & 2sg-aux-verb-lex.

mood-strong-real-2pl-verb-lex := mood-strong-real-verb-lex & 2pl-aux-verb-lex.

mood-strong-real-3-verb-lex := mood-strong-real-verb-lex & 3-aux-verb-lex.

mood-weak-1sg-verb-lex := mood-weak-verb-lex & 1sg-aux-verb-lex.

mood-weak-1pl-verb-lex := mood-weak-verb-lex & 1pl-aux-verb-lex.

mood-weak-2sg-verb-lex := mood-weak-verb-lex & 2sg-aux-verb-lex.

mood-weak-2pl-verb-lex := mood-weak-verb-lex & 2pl-aux-verb-lex.

mood-weak-3-verb-lex := mood-weak-verb-lex & 3-aux-verb-lex.

neutral-mood-1sg-verb-lex := mood-neutral-verb-lex & 1sg-aux-verb-lex.

neutral-mood-1pl-verb-lex := mood-neutral-verb-lex & 1pl-aux-verb-lex.

neutral-mood-2sg-verb-lex := mood-neutral-verb-lex & 2sg-aux-verb-lex.

neutral-mood-2pl-verb-lex := mood-neutral-verb-lex & 2pl-aux-verb-lex.

neutral-mood-3-verb-lex := mood-neutral-verb-lex & 3-aux-verb-lex &
  [ INFLECTED.SOME-INFLECTION - ].

unknown-mood-1sg-verb-lex := mood-unknown-verb-lex & 1sg-aux-verb-lex.

unknown-mood-1pl-verb-lex := mood-unknown-verb-lex & 1pl-aux-verb-lex.

unknown-mood-2sg-verb-lex := mood-unknown-verb-lex & 2sg-aux-verb-lex.

unknown-mood-2pl-verb-lex := mood-unknown-verb-lex & 2pl-aux-verb-lex.

unknown-mood-3-verb-lex := mood-unknown-verb-lex & 3-aux-verb-lex.

possible-mood-1sg-verb-lex := mood-possible-verb-lex & 1sg-aux-verb-lex.

possible-mood-1pl-verb-lex := mood-possible-verb-lex & 1pl-aux-verb-lex.

possible-mood-2sg-verb-lex := mood-possible-verb-lex & 2sg-aux-verb-lex.

possible-mood-2pl-verb-lex := mood-possible-verb-lex & 2pl-aux-verb-lex.

possible-mood-3-verb-lex := mood-possible-verb-lex & 3-aux-verb-lex.

hearsay-mood-1sg-verb-lex := mood-hearsay-verb-lex & 1sg-aux-verb-lex.

hearsay-mood-1pl-verb-lex := mood-hearsay-verb-lex & 1pl-aux-verb-lex.

hearsay-mood-2sg-verb-lex := mood-hearsay-verb-lex & 2sg-aux-verb-lex.

hearsay-mood-2pl-verb-lex := mood-hearsay-verb-lex & 2pl-aux-verb-lex.

hearsay-mood-3-verb-lex := mood-hearsay-verb-lex & 3-aux-verb-lex.

dubitative-mood-3-verb-lex := mood-dubitative-verb-lex & 3-aux-verb-lex.

inferential-mood-3-verb-lex := mood-inferential-verb-lex & 3-aux-verb-lex.

command-mood-2sg-verb-lex := mood-command-verb-lex & 2sg-aux-verb-lex.

command-mood-2pl-verb-lex := mood-command-verb-lex & 2pl-aux-verb-lex.

command-mood-1pl-verb-lex := mood-command-verb-lex & 1pl-aux-verb-lex.

question-mood-1sg-verb-lex := mood-question-verb-lex & 1sg-aux-verb-lex.

question-mood-1pl-verb-lex := mood-question-verb-lex & 1pl-aux-verb-lex.

question-mood-2sg-verb-lex := mood-question-verb-lex & 2sg-aux-verb-lex.

question-mood-2pl-verb-lex := mood-question-verb-lex & 2pl-aux-verb-lex.

question-mood-3-verb-lex := mood-question-verb-lex & 3-aux-verb-lex.

definite-mood-subj-1sg-verb-lex := mood-definite-subj-raising-verb-lex & 1sg-aux-verb-lex.

definite-mood-subj-1pl-verb-lex := mood-definite-subj-raising-verb-lex & 1pl-aux-verb-lex.

definite-mood-subj-2sg-verb-lex := mood-definite-subj-raising-verb-lex & 2sg-aux-verb-lex.

definite-mood-subj-2pl-verb-lex := mood-definite-subj-raising-verb-lex & 2pl-aux-verb-lex.

definite-mood-subj-3-verb-lex := mood-definite-subj-raising-verb-lex & 3-aux-verb-lex.

definite-mood-obj-1sg-verb-lex := mood-definite-obj-raising-verb-lex & 1sg-aux-verb-lex.

definite-mood-obj-1pl-verb-lex := mood-definite-obj-raising-verb-lex & 1pl-aux-verb-lex.

definite-mood-obj-2sg-verb-lex := mood-definite-obj-raising-verb-lex & 2sg-aux-verb-lex.

definite-mood-obj-2pl-verb-lex := mood-definite-obj-raising-verb-lex & 2pl-aux-verb-lex.

definite-mood-obj-3-verb-lex := mood-definite-obj-raising-verb-lex & 3-aux-verb-lex.

definite-mood-when-1sg-verb-lex := mood-definite-when-verb-lex & 1sg-aux-verb-lex.

definite-mood-when-1pl-verb-lex := mood-definite-when-verb-lex & 1pl-aux-verb-lex.

definite-mood-when-2sg-verb-lex := mood-definite-when-verb-lex & 2sg-aux-verb-lex.

definite-mood-when-2pl-verb-lex := mood-definite-when-verb-lex & 2pl-aux-verb-lex.

definite-mood-when-3-verb-lex := mood-definite-when-verb-lex & 3-aux-verb-lex.

transitive-clausal-verbs-verb-lex := main-verb-verb-lex & transitive-verb-lex.

continuative-transitive-verb-lex := transitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT CT ].

repetitive-transitive-verb-lex := transitive-verb-inflected-lex &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT RP ].

;neutral-mood-3-verb-lex := mood-neutral-verb-lex & 3-aux-verb-lex.

;possible-mood-to-modifier-lex-rule := lex-rule &
;  [  ].

;;; Auxiliaries

; 2019-03-29 subj is raised
s-comp-aux := aux-lex & basic-one-arg &
  [ SYNSEM.LOCAL.CAT.VAL [ SPR < >,
                           SPEC < >,
                           SUBJ < #subj >,
                           COMPS < #comps > ],
    ARG-ST < #comps &
             [ LOCAL.CAT [ VAL [ SUBJ < #subj >,
                                 COMPS < > ,
                                 SPR < >,
                                 SPEC < > ],
                           HEAD verb ] ] > ].

; Not inheriting from basic-verb-lex, so need to put in
; event-relation by hand here.

s-comp-aux-with-pred := s-comp-aux & hcons-lex-item &
  [ SYNSEM [ LOCAL.CONT.HCONS <! qeq &
                                 [ HARG #harg,
                                   LARG #larg ] !>,
             LKEYS.KEYREL event-relation &
                          [ ARG1 #harg ] ],
    ARG-ST < [ LOCAL.CONT.HOOK.LTOP #larg ] > ].

neg-aux-lex := s-comp-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD [ AUX -,
                                                      FORM nonfinite ] ].

;;; Copulas

; 2019-03-23 there is no reason that the complement's subject needs to be null.
; In fact I think it should be cons & equal to the copula's subj. Adding this.
; Also had to remove cat-sat from COMPS < [ LOCAL.CAT ] > 
cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 & non-mod-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj & [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT cat-sat &
                                                  [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun ] ] ] >,
                             COMPS < [ LOCAL.CAT [ HEAD [ PRD +,
                                                          MOD < > ],
                                                   VAL [ SUBJ < #subj >,
                                                         COMPS < >,
                                                         SPEC < >,
                                                         SPR < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

; 2019-03-23 expanding to include verbs
adj-verb-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD +vj ].

copula-cop-lex := adj-verb-comp-copula-verb-lex.

;;; Adjectives


adj-lex := basic-intersective-adjective-lex & predicate-lex & 
  [ SYNSEM.LOCAL.CAT.HEAD.AUX -,
    INFLECTED infl-satisfied ].

adjective-adj-lex := attr-adj-lex & stative-pred-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD - ] ].

adjective-adj-pl-lex := adjective-adj-lex & 
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ] > ].

quantifier-adj-lex := attr-adj-lex & stative-pred-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD - ] ].

; Basic attributive adjective definition
; 2019-03-30 TODO: review removed head noun (doesn't have to be) & val.spr cons (should be able to be empty??).
;            instead head.prd + and that's it.
; 2019-03-30 removing PRD + as it doesn't work (as foreseen) with adjective raising. Changing to AUX -.
attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD.AUX - ] ] > ].

; Stative predicate adjective definition

stative-pred-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

;;; Complementizers


;;; Adverbs

; 2019-03-22 Same trick where I don't want this applying to bare clitics
; 2019-04-01 adding subj < > to reduce spurious ambiguity with opt subj
head-adj-scop-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < >,
                                                          COMPS phlist ] ].

adv-lex := basic-scopal-adverb-lex &
  [ SYNSEM.LOCAL.CAT [ VAL [ SPR < >,
                             COMPS < >,
                             SUBJ < > ],
                       HEAD [ MOD < [ LOCAL.CAT.HEAD [ PRD + ] ] >,
                              PRD - ] ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

high-or-mid-nominalization-lex-rule := cat-change-with-ccont-lex-rule & same-cont-lex-rule &
  [ SYNSEM.LOCAL [ CONT.HOOK.INDEX event,
                   CAT [ HEAD verb &
                              [ NMZ +,
                                MOD #mod ],
                         VAL [ SUBJ #subj,
                               COMPS #comps,
                               SPR #spr,
                               SPEC #spec ],
                         MC #mc,
                         MKG #mkg,
                         HC-LIGHT #hc-light,
                         POSTHEAD #posthead ] ],
    DTR.SYNSEM.LOCAL.CAT [ HEAD.MOD #mod,
                           VAL [ SUBJ #subj,
                                 COMPS #comps,
                                 SPR #spr,
                                 SPEC #spec ],
                           MC #mc,
                           MKG #mkg,
                           HC-LIGHT #hc-light,
                           POSTHEAD #posthead ],
    C-CONT [ RELS <!  !>,
             HCONS <!  !> ] ].

low-nominalization-lex-rule := cat-change-with-ccont-lex-rule &
  [ SYNSEM.LOCAL.CAT [ HEAD noun &
                            [ NMZ +,
                              MOD #mod ],
                       VAL [ SUBJ < [ LOCAL [ CAT.VAL.SPR < >,
                                              CONT.HOOK.INDEX #subj ] ] >,
                             SPEC #spec,
                             SPR < [ OPT + ] > ],
                       MC #mc,
                       MKG #mkg,
                       HC-LIGHT #hc-light,
                       POSTHEAD #posthead ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD.MOD #mod,
                             VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #subj ] >,
                                   SPEC #spec ],
                             MC #mc,
                             MKG #mkg,
                             HC-LIGHT #hc-light,
                             POSTHEAD #posthead ],
                       CONT.HOOK [ XARG #xarg,
                                   LTOP #larg ] ] ].

low-nmz-subjid-compsid-lex-rule := low-nominalization-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                           SUBJ #subj ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS #comps,
                               SUBJ #subj ] ].

;;; Intermediate rule types

post-clitic-plural-rule-dtr := word-or-lexrule.
pre-clitic-now-rule-dtr := word-or-lexrule.
pre-clitic-poss-rule-dtr := word-or-lexrule.
pre-clitic-passive-rule-dtr := word-or-lexrule.
pre-clitic-future-rule-dtr := word-or-lexrule.
pre-clitic-causative-rule-dtr := word-or-lexrule.
aspect-2-rule-dtr := word-or-lexrule.
aspect-3-rule-dtr := word-or-lexrule.
post-clitic-also-rule-dtr := word-or-lexrule.
aux-type-raising-dtr := word-or-lexrule.
post-clitic-habitual-lex-rule-dtr := word-or-lexrule.
2p-suffix-transitive-verb-rule-dtr := word-or-lexrule.
2p-suffix-ditransitive-verb-rule-dtr := word-or-lexrule.

;;; Lexical rule types


;;; 2019-04-04 incorporating suffixes

add-incorporation-lex-rule := lex-rule & 
  [ INFLECTED [ CONTINUATIVE-FORM-FLAG #ct-flag,
                ITERATIVE-FORM-FLAG #it-flag,
                MOMENTANEOUS-FORM-FLAG #mo-flag,
                REPETITIVE-FORM-FLAG #rp-flag,
                INCEPTIVE-FORM-FLAG #it-flag,
                INCEPTIVE-COMPLEX-FLAG #in-flag,
                ASPECT-2-FLAG #asp2-flag,
                MOMENTANEOUS-COMPLEX-FLAG #mo-com-flag,
                DURATIVE-FORM-FLAG #dr-flag,
                PRE-CLITIC-PAST-FLAG #cliticpast-flag,
                ASPECT-1-FLAG #asp1-flag,
                SOME-INFLECTION #some-flag,
                INCORPORATION-FLAG + ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #ct-flag,
                    ITERATIVE-FORM-FLAG #it-flag,
                    MOMENTANEOUS-FORM-FLAG #mo-flag,
                    REPETITIVE-FORM-FLAG #rp-flag,
                    INCEPTIVE-FORM-FLAG #it-flag,
                    INCEPTIVE-COMPLEX-FLAG #in-flag,
                    ASPECT-2-FLAG #asp2-flag,
                    MOMENTANEOUS-COMPLEX-FLAG #mo-com-flag,
                    DURATIVE-FORM-FLAG #dr-flag,
                    PRE-CLITIC-PAST-FLAG #cliticpast-flag,
                    ASPECT-1-FLAG #asp1-flag,
                    SOME-INFLECTION #some-flag,
                    INCORPORATION-FLAG - ] ].

; HACKY: I am keeping SPEC unspecified 'cause I'm using it as scratch for ditransitives :/
incorporating-lex-rule := cat-change-only-lex-rule & 
  [ SYNSEM.LOCAL.CAT [ VAL [ SUBJ < [ LOCAL [ CAT.HEAD noun ] ] >,
                             SPR < > ],
                       HEAD verb & [ PRD +,
                                     AUX -,
                                     FORM non-root-nonfinite ] ],
    INFLECTED.INCORPORATION-FLAG -,
    DTR.SYNSEM.LOCAL.CAT.HEAD [ NMZ -,
                                AUX -,
                                FORM root ] ].

incorporating-lex-rule-old := same-ctxt-lex-rule & same-agr-lex-rule & same-light-lex-rule & same-non-local-lex-rule &
  [ SYNSEM.LOCAL [ CAT [ VAL [ SUBJ < [ LOCAL [ CAT.HEAD verb,
                                                CONT.HOOK.XARG #arg1 ] ] >,
                               SPR < >,
                               SPEC < > ],
                         HEAD verb & [ PRD +,
                                       AUX -,
                                       FORM non-root-nonfinite ] ],
                   CONT.HOOK [ INDEX #arg0,
                               XARG #arg1,
                               LTOP #lbl ] ],
    C-CONT [ RELS <! [ LBL #lbl,
                       ARG0 event & #arg0,
                       ARG1 ref-ind & #arg1 ] !>,
             ICONS <! !> ],
    DTR.SYNSEM.LOCAL.CAT.HEAD [ NMZ -,
                                AUX -,
                                FORM root ] ].

noun-incorporation-lex-rule-super := incorporating-lex-rule & 
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD < > ],
    C-CONT.HCONS <! !>,
    DTR common-noun-word-and-root-lex & [ SYNSEM.LOCAL.CAT.HEAD noun & [ PRD +,
                                                                         MOD < > ] ] ].

noun-incorporation-transitive-lex-rule := noun-incorporation-lex-rule-super & 2p-suffix-transitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; HACKY: I am using the SPEC value to store the comps (will need later)
noun-incorporation-ditransitive-lex-rule := noun-incorporation-lex-rule-super & 2p-suffix-ditransitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SPEC < #comp2 >,
                           COMPS < #comp2 & synsem-min > ] ].

; 2019-04-04 HACKY: I am stuffing the LTOP of the adverb into the GTOP. This may cause problems down the road..
adv-incorporation-lex-rule := incorporating-lex-rule & 
  [ SYNSEM.LOCAL [ CAT [ HEAD.MOD < >,
                         VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX #xarg ],
                   CONT.HOOK [ GTOP #ltop,
                               XARG #xarg ] ],
    DTR adv-lex & [ SYNSEM.LOCAL.CAT.HEAD adv & [ MOD < [ LOCAL.CONT.HOOK.LTOP #ltop ] > ] ] ].

adv-incorporation-transitive-lex-rule := adv-incorporation-lex-rule & 2p-suffix-transitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.REST null ].

; HACKY: I am using the SPEC value to store the 2nd comps (will need later)
adv-incorporation-ditransitive-lex-rule := adv-incorporation-lex-rule & 2p-suffix-ditransitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SPEC < #comp2 >,
                           COMPS.REST [ FIRST #comp2 & synsem-min,
                                        REST null ] ] ].

adj-incorporation-lex-rule := incorporating-lex-rule & 
  [ SYNSEM.LOCAL.CAT [ HEAD.MOD < >,
                       VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX #mod-index ],
    C-CONT.HCONS <! !>,
    DTR attr-adj-lex & [ SYNSEM.LOCAL.CAT [ HEAD adj,
                                            VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #mod-index ] > ] ] ].

adj-incorporation-transitive-lex-rule := adj-incorporation-lex-rule & 2p-suffix-transitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.REST null ].

; HACKY: I am using the SPEC value to store the 2nd comps (will need later)
adj-incorporation-ditransitive-lex-rule := adj-incorporation-lex-rule & 2p-suffix-ditransitive-verb-rule-dtr &
  [ SYNSEM.LOCAL.CAT.VAL [ SPEC < #comp2 >,
                           COMPS.REST [ FIRST #comp2 & synsem-min,
                                        REST null ] ] ].

2p-suffix-verb-lex-rule-super := same-head-lex-rule & same-light-lex-rule & same-ctxt-lex-rule & same-head-lex-rule & 
                           same-agr-lex-rule & no-hcons-lex-item & no-icons-lex-item & add-incorporation-lex-rule & infl-lex-rule &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj & [ LOCAL.CONT.HOOK.INDEX #arg1 ] >,
                             COMPS #comps,
                             SPEC < >,
                             SPR < > ],
                   CONT.HOOK [ INDEX #arg0,
                               XARG #arg1,
                               LTOP #lbl ] ],
    C-CONT.RELS <! [ ARG0 event & #arg0,
                     ARG1 ref-ind & #arg1,
                     ARG2 ref-ind & #arg2,
                     LBL #lbl ] !>,
    DTR [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < #subj >,
                                 COMPS #comps ],
                       CONT.HOOK [ XARG #arg2,
                                   GTOP #lbl ] ] ] ].

; 2019-04-04 HACKY: using daughter's GTOP to associate with LTOP of the current arg. Probably bad.....
2p-suffix-transitive-verb-lex-rule := 2p-suffix-verb-lex-rule-super &
  [ DTR 2p-suffix-transitive-verb-rule-dtr ].

2p-suffix-ditransitive-verb-lex-rule := 2p-suffix-verb-lex-rule-super &
  [ C-CONT.RELS <! [ ARG3 ref-ind & #arg3 ] !>,
    DTR 2p-suffix-ditransitive-verb-rule-dtr &
      [ SYNSEM.LOCAL [ CAT.VAL [ SPEC < [ LOCAL.CONT.HOOK.INDEX #arg3 ] > ] ] ] ].

naak-lex-rule := 2p-suffix-transitive-verb-lex-rule & 
  [ C-CONT.RELS <! [ PRED "_have_v_rel" ] !> ].

find-lex-rule := 2p-suffix-transitive-verb-lex-rule & 
  [ C-CONT.RELS <! [ PRED "_find_v_rel" ] !> ].

take-lex-rule := 2p-suffix-transitive-verb-lex-rule & 
  [ C-CONT.RELS <! [ PRED "_take_v_rel" ] !> ].

talk-about-lex-rule := 2p-suffix-transitive-verb-lex-rule & 
  [ C-CONT.RELS <! [ PRED "_talk.about_v_rel" ] !> ].

go-after-lex-rule := 2p-suffix-transitive-verb-lex-rule & 
  [ C-CONT.RELS <! [ PRED "_go.after_v_rel" ] !> ].

give-lex-rule := 2p-suffix-ditransitive-verb-lex-rule &
  [ C-CONT.RELS <! [ PRED "_give_v_rel" ] !> ].

;;; 2019-03-22 allowing intransitive verbs to become adjectives
intransitive-to-int-adj-lex-rule := cat-change-only-lex-rule & 
  [ SYNSEM.LOCAL.CAT [ HEAD adj &
                             [ PRD -,
                               NMZ #nmz,
                               AUX -,
                               MOD < #subj & [ LOCAL intersective-mod ] >,
                               KEYS #keys,
                               POSSESSOR #poss,
                               INIT #init,
                               SPEC-INIT #spec,
                               FORM #form ],
                           VAL [ SPR < >,
                                 SPEC < >,
                                 SUBJ < >,
                                 COMPS < > ] ],
    DTR [ SYNSEM.LOCAL [ CAT [ HEAD verb & 
                              [ PRD +,
                                NMZ #nmz,
                                AUX -,
                                MOD < >,
                                KEYS #keys,
                                POSSESSOR #poss,
                                INIT #init,
                                SPEC-INIT #spec,
                                FORM #form ],
                             VAL [ SUBJ < #subj >,
                                   COMPS < >,
                                   SPR < >,
                                   SPEC < > ] ] ],
          INFLECTED infl-satisfied ] ].

;;; 2019-03-12 allowing nouns to go through this rule to become individuals
;;; this is the version of the rule that just changes the index
;;; TODO: This started working when I added the C-CONT. WHY!? Investigate...
;;; 2019-04-03 pushing 3rd person info into here!
noun-relativizer-lex-rule := same-non-local-lex-rule & same-modified-lex-rule & same-light-lex-rule & 
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun & 
                            [ PRD -,
                              NMZ +,
                              AUX -,
                              MOD #mod,
                              KEYS #keys,
                              POSSESSOR #poss,
                              INIT #init,
                              SPEC-INIT #spec,
                              FORM #form ],
                         VAL [ SPEC < >,
                               SUBJ < >,
                               SPR < >,
                               COMPS < > ] ],
                   CONT.HOOK [ INDEX #xarg & [ PNG.PER 3rd ] ] ] ],
    C-CONT [ RELS <! !>,
       HCONS <! !>,
       HOOK.INDEX #xarg & ref-ind ],
    DTR [ INFLECTED infl-satisfied,
          SYNSEM [ LOCAL [ CAT [ HEAD noun &
                               [ PRD +,
                                 NMZ -,
                                 AUX -,
                                 MOD #mod,
                                 KEYS #keys,
                                 POSSESSOR #poss,
                                 INIT #init,
                                 SPEC-INIT #spec,
                                 FORM #form ] ],
                           CONT.HOOK [ XARG #xarg ] ] ] ] ].

;;; 2019-03-19 This rule won't do because because I need to relativize full NPs: n̓aacsiičiƛs ʔiiḥ ʕiniiƛ.
;;; this is the version of the rule that adds the nominalized_rel
rel-noun-relativizer-lex-rule := same-non-local-lex-rule & same-modified-lex-rule & same-light-lex-rule &
  [ SYNSEM.LOCAL [ CAT [ HEAD noun & 
                            [ PRD -,
                              NMZ +,
                              AUX -,
                              MOD #mod,
                              KEYS #keys,
                              POSSESSOR #poss,
                              INIT #init,
                              SPEC-INIT #spec,
                              FORM #form ],
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < >,
                               COMPS < > ] ],
                   CONT.HOOK.INDEX #xarg ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    DTR.SYNSEM.LOCAL [ CAT [ HEAD noun &
                               [ PRD +,
                                 NMZ -,
                                 AUX -,
                                 MOD #mod,
                                 KEYS #keys,
                                 POSSESSOR #poss,
                                 INIT #init,
                                 SPEC-INIT #spec,
                                 FORM #form ] ],
                       CONT.HOOK [ XARG #xarg,
                                   LTOP #larg ] ] ].

aspect-1-lex-rule-super := add-only-no-ccont-rule & aspect-2-rule-dtr & aspect-3-rule-dtr & infl-lex-rule &  
  [ INFLECTED [ ASPECT-1-FLAG +,
                INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                ASPECT-2-FLAG #aspect-2,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR main-verb-verb-lex &
        [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                      PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                      ASPECT-2-FLAG #aspect-2,
                      MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ] ] ].

momentaneous-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ MOMENTANEOUS-FORM-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ITERATIVE-FORM-FLAG #iterative-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                DURATIVE-FORM-FLAG #durative-form ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                    ITERATIVE-FORM-FLAG #iterative-form,
                    REPETITIVE-FORM-FLAG #repetitive-form,
                    INCEPTIVE-FORM-FLAG #inceptive-form,
                    DURATIVE-FORM-FLAG #durative-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT momentaneous ].

inceptive-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ INCEPTIVE-FORM-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                DURATIVE-FORM-FLAG #durative-form ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                    ITERATIVE-FORM-FLAG #iterative-form,
                    MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                    REPETITIVE-FORM-FLAG #repetitive-form,
                    DURATIVE-FORM-FLAG #durative-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT inceptive ].

continuative-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ CONTINUATIVE-FORM-FLAG +,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                DURATIVE-FORM-FLAG #durative-form ],
    DTR.INFLECTED [ ITERATIVE-FORM-FLAG #iterative-form,
                    MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                    REPETITIVE-FORM-FLAG #repetitive-form,
                    INCEPTIVE-FORM-FLAG #inceptive-form,
                    DURATIVE-FORM-FLAG #durative-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT continuative ].

durative-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ DURATIVE-FORM-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ITERATIVE-FORM-FLAG #iterative-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                    ITERATIVE-FORM-FLAG #iterative-form,
                    REPETITIVE-FORM-FLAG #repetitive-form,
                    INCEPTIVE-FORM-FLAG #inceptive-form,
                    MOMENTANEOUS-FORM-FLAG #momentaneous-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT durative ].

repetitive-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ REPETITIVE-FORM-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                DURATIVE-FORM-FLAG #durative-form ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                    ITERATIVE-FORM-FLAG #iterative-form,
                    MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                    INCEPTIVE-FORM-FLAG #inceptive-form,
                    DURATIVE-FORM-FLAG #durative-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT repetitive ].

iterative-form-lex-rule := aspect-1-lex-rule-super &
  [ INFLECTED [ ITERATIVE-FORM-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                DURATIVE-FORM-FLAG #durative-form ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                    MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                    REPETITIVE-FORM-FLAG #repetitive-form,
                    INCEPTIVE-FORM-FLAG #inceptive-form,
                    DURATIVE-FORM-FLAG #durative-form ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT iterative ].

aspect-2-lex-rule-super := add-only-no-ccont-rule & 
  [ INFLECTED [ ASPECT-2-FLAG +,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                DURATIVE-FORM-FLAG #durative-form,
                PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                ASPECT-1-FLAG #aspect-1 ],
    DTR aspect-2-rule-dtr &
        [ INFLECTED [ CONTINUATIVE-FORM-FLAG #continuative-form,
                      ITERATIVE-FORM-FLAG #iterative-form,
                      MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                      REPETITIVE-FORM-FLAG #repetitive-form,
                      INCEPTIVE-FORM-FLAG #inceptive-form,
                      DURATIVE-FORM-FLAG #durative-form,
                      PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                      ASPECT-1-FLAG #aspect-1 ] ] ].

repetitive-perfective-lex-rule := aspect-2-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ REPETITIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT RP-PF ].

repetitive-lex-rule := aspect-2-lex-rule-super & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ REPETITIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT RP ].

momentaneous-lex-rule := aspect-2-lex-rule-super & aspect-3-rule-dtr & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ MOMENTANEOUS-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT MO ].

inceptive-lex-rule := aspect-2-lex-rule-super & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ INCEPTIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT IN ].

momentaneous-complex-lex-rule := aspect-2-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ MOMENTANEOUS-COMPLEX-FLAG +,
                INCEPTIVE-COMPLEX-FLAG #inceptive-complex ],
    DTR.INFLECTED [ MOMENTANEOUS-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex ] ].

continuative-lex-rule := aspect-2-lex-rule-super & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ CONTINUATIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ] ].

inceptive-complex-lex-rule := aspect-2-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG +,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ] ].

durative-perfective-lex-rule := aspect-2-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ DURATIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT DR-PF ].

durative-lex-rule := aspect-2-lex-rule-super & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ DURATIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT DR ].

iterative-perfective-lex-rule := aspect-2-lex-rule-super & infl-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ ITERATIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ] ].

iterative-lex-rule := aspect-2-lex-rule-super & const-lex-rule &
  [ INFLECTED [ INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    DTR.INFLECTED [ ITERATIVE-FORM-FLAG +,
                    INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                    MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ],
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT IT ].

aspect-3-lex-rule-super := add-only-no-ccont-rule & 
  [ INFLECTED #infl,
    DTR aspect-3-rule-dtr &
        [ INFLECTED #infl ] ].

momentaneous-graduative-perfective-lex-rule := aspect-3-lex-rule-super & infl-lex-rule &
  [ DTR.INFLECTED.MOMENTANEOUS-COMPLEX-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT MO-GRAD-PF ].

inceptive-graduative-lex-rule := aspect-3-lex-rule-super & const-lex-rule &
  [ DTR.INFLECTED.INCEPTIVE-COMPLEX-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT IN-GRAD ].

momentaneous-graduative-lex-rule := aspect-3-lex-rule-super & const-lex-rule &
  [ DTR.INFLECTED.MOMENTANEOUS-COMPLEX-FLAG +,
    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT MO-GRAD ].

inceptive-graduative-perfective-lex-rule := aspect-3-lex-rule-super & infl-lex-rule &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT IN-GRAD-PF ].

clitic-inflection-lex-rule-super := lex-rule &
  [ INFLECTED [ PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ASPECT-2-FLAG #aspect-2,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                ASPECT-1-FLAG #aspect-1,
                DURATIVE-FORM-FLAG #durative-form,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex,
                SOME-INFLECTION + ],
    DTR.INFLECTED [ PRE-CLITIC-PAST-FLAG #pre-clitic-past,
                CONTINUATIVE-FORM-FLAG #continuative-form,
                ASPECT-2-FLAG #aspect-2,
                ITERATIVE-FORM-FLAG #iterative-form,
                MOMENTANEOUS-FORM-FLAG #momentaneous-form,
                REPETITIVE-FORM-FLAG #repetitive-form,
                INCEPTIVE-FORM-FLAG #inceptive-form,
                INCEPTIVE-COMPLEX-FLAG #inceptive-complex,
                ASPECT-1-FLAG #aspect-1,
                DURATIVE-FORM-FLAG #durative-form,
                MOMENTANEOUS-COMPLEX-FLAG #momentaneous-complex ] ].

post-clitic-habitual-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & post-clitic-also-rule-dtr & post-clitic-plural-rule-dtr & aux-type-raising-dtr &
  [ DTR post-clitic-habitual-lex-rule-dtr ].

;; 2019-03-06 Changed commented line to get it to compile, investigate later
habitual-lex-rule := post-clitic-habitual-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.ASPECT habitual ].
;    SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT habitual ].

post-clitic-plural-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & post-clitic-also-rule-dtr & aux-type-raising-dtr &
  [ DTR post-clitic-plural-rule-dtr ].

clitic-plural-lex-rule := post-clitic-plural-lex-rule-super &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM plural ].

pre-clitic-past-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & pre-clitic-now-rule-dtr & pre-clitic-passive-rule-dtr & pre-clitic-poss-rule-dtr & aux-type-raising-dtr & post-clitic-habitual-lex-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR mood-2p-verb-lex ].

past-lex-rule := pre-clitic-past-lex-rule-super & 
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.TENSE past ].

pre-clitic-poss-lex-rule-super := clitic-inflection-lex-rule-super & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & pre-clitic-now-rule-dtr & pre-clitic-passive-rule-dtr & val-change-with-ccont-lex-rule & aux-type-raising-dtr & post-clitic-habitual-lex-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR pre-clitic-poss-rule-dtr ].

clitic-poss-intrans-lex-rule := causative-to-arg2-itr-op-lex-rule & infl-lex-rule & pre-clitic-poss-lex-rule-super & same-non-local-lex-rule &
  [ C-CONT.RELS <! [ PRED "POSS" ] !> ].

clitic-poss-trans-lex-rule := causative-to-arg2-tr-op-lex-rule & pre-clitic-poss-lex-rule-super & same-non-local-lex-rule &
  [ C-CONT.RELS <! [ PRED "POSS" ] !> ].

pre-clitic-passive-lex-rule-super := clitic-inflection-lex-rule-super & infl-lex-rule & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & pre-clitic-now-rule-dtr & val-change-with-ccont-lex-rule & aux-type-raising-dtr & post-clitic-habitual-lex-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR pre-clitic-passive-rule-dtr ].

clitic-passive-lex-rule := subj-dem-to-arg3of3-op-lex-rule & local-change-only-lex-rule & pre-clitic-passive-lex-rule-super & same-cont-lex-rule.

pre-clitic-now-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & pre-clitic-causative-rule-dtr & pre-clitic-future-rule-dtr & aux-type-raising-dtr & post-clitic-habitual-lex-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR pre-clitic-now-rule-dtr ].

clitic-now-lex-rule := pre-clitic-now-lex-rule-super.

pre-clitic-causative-lex-rule-super := clitic-inflection-lex-rule-super & infl-lex-rule & pre-clitic-future-rule-dtr & val-change-with-ccont-lex-rule & aux-type-raising-dtr & post-clitic-habitual-lex-rule-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR pre-clitic-causative-rule-dtr ].

clitic-causative-intrans-lex-rule := causative-to-arg2-itr-op-lex-rule & pre-clitic-causative-lex-rule-super & same-non-local-lex-rule &
  [ C-CONT.RELS <! [ PRED "CAUS" ] !> ].

clitic-causative-trans-lex-rule := causative-to-arg2-tr-op-lex-rule & pre-clitic-causative-lex-rule-super & same-non-local-lex-rule &
  [ C-CONT.RELS <! [ PRED "CAUS" ] !> ].

pre-clitic-future-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & aux-type-raising-dtr & post-clitic-plural-rule-dtr & post-clitic-also-rule-dtr & post-clitic-also-rule-dtr &
  [ DTR pre-clitic-future-rule-dtr ].

clitic-future-lex-rule := pre-clitic-future-lex-rule-super &
  [ DTR.INFLECTED.PRE-CLITIC-PAST-FLAG na,
    SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CONT.HOOK.INDEX.E.TENSE future ].

post-clitic-also-lex-rule-super := clitic-inflection-lex-rule-super & add-only-no-ccont-rule & infl-lex-rule & aux-type-raising-dtr &
  [ DTR post-clitic-also-rule-dtr ].

clitic-also-lex-rule := post-clitic-also-lex-rule-super.

subj-dem-to-arg3of3-op-lex-rule := subj-and-comps-change-only-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #oarg,
                                 [ LOCAL.CONT.HOOK.INDEX #sidx ] >,
    DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CONT.HOOK.INDEX #sidx ] >,
                               COMPS < #oarg,
                                       [ ] > ] ].

causative-to-arg2-tr-op-lex-rule := scopal-rel-lex-rule & same-spr-lex-rule & same-spec-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.VAL [ SPR < >,
                                                    COMPS < > ] ] >,
                           COMPS < [ LOCAL [ CONT.HOOK.INDEX #arg2,
                                             CAT [ HEAD [ MOD #mod,
                                                          KEYS #keys ],
                                                   VAL #val ] ],
                                     NON-LOCAL #nl ],
                                   #comp > ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg2,
                                                CAT [ HEAD [ MOD #mod,
                                                             KEYS #keys ],
                                                      VAL #val ] ],
                                        NON-LOCAL #nl ] >,
                               COMPS < #comp > ] ].

causative-to-arg2-itr-op-lex-rule := scopal-rel-lex-rule & same-spr-lex-rule & same-spec-lex-rule &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL.CAT.VAL [ SPR < >,
                                                    COMPS < > ] ] >,
                           COMPS < [ LOCAL [ CONT.HOOK.INDEX #arg2,
                                             CAT [ HEAD [ MOD #mod,
                                                          KEYS #keys ],
                                                   VAL #val ] ],
                                     NON-LOCAL #nl ] > ],
    DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #arg2,
                                                CAT [ HEAD [ MOD #mod,
                                                             KEYS #keys ],
                                                      VAL #val ] ],
                                        NON-LOCAL #nl ] >,
                               COMPS < > ] ].

scopal-rel-lex-rule := lex-rule &
  [ C-CONT [ RELS <! event-relation &
                     [ LBL #ltop,
                       ARG0 #hidx,
                       ARG1 #arg1,
                       ARG2 #arg2,
                       ARG3 #harg ] !>,
             HOOK [ LTOP #ltop,
                    INDEX #hidx,
                    XARG #arg1 ],
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #scoped ] !> ],
    SYNSEM.LOCAL.CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #arg1 ] >,
    DTR.SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL.CONT.HOOK.INDEX #arg2 ] >,
                       CONT.HOOK.LTOP #scoped ] ].

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

; 2019-03-31 Extraction types

basic-extracted-arg-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ AUX +,
                                                                 PRD + ] ].

basic-extracted-adj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ AUX +,
                                                                 PRD + ] ].

; extracted comp must be PH + (i.e., not the comp of a 2p aux)
; 2019-04-01 can only extract 1 arg at a time: i.e., if everything else is satisfied. can constrain other VAL lists to < >.
nuk-extracted-comp-phrase := basic-extracted-comp-phrase & 
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ SUBJ olist,
                                    COMPS < [ LOCAL.CAT.POSTHEAD + ] > ] ].

nuk-extracted-subj-phrase := basic-extracted-subj-phrase & 
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL [ COMPS <  > ] ].

; TODO: constrain extracted adj to be quantifiers
nuk-extracted-adj-phrase := extracted-adj-phrase.

; despite a HEAD-DTR with SUBJ < > the subj of the mother is not defined? Adding SUBJ < > to mother
; 2019-04-01 I think I only want this to extract from clausal auxes (aux + prd +) & filler should be prd -
; hacky but am requiring it to apply immediately after extraction :/
nuk-filler-head-phrase := basic-head-filler-phrase & head-final & 
  [ SYNSEM.LOCAL.CAT.VAL #val,
    HEAD-DTR basic-extracted-arg-phrase & [ SYNSEM.LOCAL.CAT [ HEAD [ AUX +,
                                       PRD +,
                                       FORM finite ],
                                VAL #val & [ COMPS < >,
                                      SPEC < >,
                                      SPR < > ] ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRD - ].

; 2019-03-23 Need to make sure adjectives don't apply to the left of the 2P article
adj-head-int-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.AUX - ].

;2019-03-23 Doing the same to adj-head-scop-phrase
;;; TODO: This is blocking things like t̓an̓aqas nunuukinʔaała
adj-head-scop-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.AUX - ].

;2019-03-30
;2019-03-31 moving this into the lexical rule set
auxiliary-type-raise-super := local-change-only-lex-rule & same-agr-lex-rule & same-ctxt-lex-rule & 
  [ SYNSEM.LOCAL [ CAT [ HEAD [ AUX-RAISE +, 
                                AUX +,
                                PRON #pron,
                                NMZ #nmz,
                                FORM #form,
                                MOD #mod ],
                         VAL [ SPEC < >,
                               SPR < >,
                               COMPS [ FIRST [ LOCAL.CAT [ HEAD [ MOD cons,
                                                                  AUX - ],
                                                     POSTHEAD - ],
                                               OPT -,
                                               L-PERIPH + ],
                                       REST [ FIRST [ LOCAL [ CAT [ HEAD #head,
                                                                   MC #mc,
                                                                   MKG #mkg,
                                                                   HC-LIGHT #hc-light,
                                                                   POSTHEAD + ],
                                                             CONT #cont,
                                                             AGR #agr,
                                                             COORD #coord ],
                                                     OPT #opt,
                                                     NON-LOCAL #nonlocal ],
                                              REST #rcomp ] ] ] ] ],
    C-CONT [ RELS  <! !>,
             HCONS <! !>,
             ICONS <! !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ VAL [ COMPS [FIRST [ LOCAL [ CAT [ HEAD #head,
                                                                     MC #mc,
                                                                     MKG #mkg,
                                                                     HC-LIGHT #hc-light,
                                                                     POSTHEAD - ],
                                                               CONT #cont,
                                                               AGR #agr,
                                                               COORD #coord ],
                                                       OPT #opt,
                                                       NON-LOCAL #nonlocal ],
                                               REST #rcomp ],
                                        SPEC < >,
                                        SPR < > ],
                                  HEAD verb & [ AUX-RAISE -,
                                         AUX +,
                                         PRON #pron,
                                         NMZ #nmz,
                                         FORM #form,
                                         MOD #mod ] ] ],
             INFLECTED infl-satisfied ] > ].

; 2019-03-19 
; 2019-04-01 removing the PRD + and changing to adverb - -- because clitics need to to attach to advs.
type-raise-clausal-clitic-lex-rule := auxiliary-type-raise-super & 
  [ SYNSEM.LOCAL [ CAT [ HEAD verb & [ PRD + ],
                         VAL [ SUBJ < #subj >,
                               COMPS [ FIRST.LOCAL.CAT.HEAD adv & [ MOD < #fcomp > ],
                                       REST [ FIRST #fcomp,
                                              REST null ] ] ] ],
                 CONT.HOOK #hook ],
    ARGS < aux-type-raising-dtr & [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < #subj >,
                                                   CONT.HOOK #hook ] ] > ].

; 2019-03-30 comps comps should always be null under this type, don't know how it becomes contentful.
type-raise-article-lex-rule := auxiliary-type-raise-super &
  [ SYNSEM.LOCAL [ CAT [ HEAD noun & [ PRD - ],
                         VAL [ SUBJ < >,
                               COMPS [ FIRST.LOCAL.CAT.HEAD.MOD < #mod & [ LOCAL.CONT.HOOK #hook ] >,
                                       REST.FIRST.LOCAL.CAT.VAL [ SUBJ < #mod >,
                                                                  COMPS #vcomps,
                                                                  SPR < >,
                                                                  SPEC < > ] ] ] ],
                 CONT.HOOK #hook ],
    ARGS < article-lex & [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < #mod >,
                                                  COMPS.FIRST.LOCAL.CAT.VAL.COMPS #vcomps ] ] > ].

; 2019-04-01

;;; 2019-03-13 Defining daughter's co mps.first as posthead or null,
;;; to prevent this from firing on POSTHEAD - (i.e., 2P's first COMP)
;;; 2019-04-01 think this should also require head-dtr to be aux +
;;; 2019-04-04 removing HEAD.AUX + requirement on daughter, may need to add back.
head-comp-phrase := basic-head-1st-comp-phrase & head-initial-head-nexus &
  [ SYNSEM.LIGHT -,
    HEAD-DTR.SYNSEM.LOCAL.CAT [ VAL.COMPS phlist ] ].

nf-comp-head-phrase := head-nf-comp-phrase-super & head-final-head-nexus &
  [ SYNSEM [ L-PERIPH +,
             INFOSTR-FLAG + ],
    HEAD-DTR.SYNSEM.LIGHT +,
    NON-HEAD-DTR.SYNSEM [ L-PERIPH +,
                          LOCAL [ CAT.HEAD +np,
                                  CONT.HOOK.ICONS-KEY focus ] ] ].

nf-subj-head-phrase := head-nf-subj-phrase-super & head-final-head-nexus &
  [ SYNSEM [ L-PERIPH +,
             INFOSTR-FLAG + ],
    HEAD-DTR.SYNSEM.LIGHT +,
    NON-HEAD-DTR.SYNSEM [ L-PERIPH +,
                          LOCAL [ CAT.HEAD +np,
                                  CONT.HOOK.ICONS-KEY focus ] ] ].

head-nf-subj-phrase-super := basic-head-subj-phrase & declarative-clause & narrow-focus &
  [ NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG + ].

head-nf-comp-phrase-super := basic-head-comp-phrase & narrow-focus &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS #comps,
    HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < #synsem . #comps >,
    NON-HEAD-DTR.SYNSEM #synsem &
                        [ INFOSTR-FLAG + ] ].

narrow-focused-phrase := head-only &
  [ C-CONT [ HOOK #hook,
             RELS <!  !>,
             HCONS <!  !>,
             ICONS <! focus-or-topic & #icons &
                      [ IARG2 #target ] !> ],
    SYNSEM [ LIGHT -,
             INFOSTR-FLAG +,
             LOCAL [ CAT.VAL [ SPR < >,
                               SUBJ < >,
                               COMPS < >,
                               SPEC < > ],
                     CONT.HOOK [ INDEX #target,
                                 ICONS-KEY #icons ] ] ],
    HEAD-DTR.SYNSEM [ LIGHT -,
                      INFOSTR-FLAG -,
                      LOCAL [ CAT.HEAD noun,
                              CONT [ HOOK #hook,
                                     ICONS <!  !> ] ] ] ].

;;; 2019-04-01 what the hell is this?
head-subj-phrase-2 := basic-head-subj-phrase & declarative-clause & head-initial &
  [ HEAD-DTR.SYNSEM [ INFOSTR-FLAG +,
                      LIGHT -,
                      LOCAL.CAT.VAL.COMPS < > ],
    NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

;;; 2019-03-13 Defining comps as posthead or null,
;;; to prevent this from firing if there is a POSTHEAD - element (i.e., 2P's first COMP)
;;; 2019-03-30 changing from phlist to olist (??)
head-comp-phrase-2 := basic-head-2nd-comp-phrase & head-initial-head-nexus &
  [ SYNSEM [ LIGHT -,
             LOCAL.CAT.VAL.COMPS olist ] ].

;;; 2019-03-13 Defining daughter's comps as posthead or null,
;;; to prevent this from firing if there is a POSTHEAD - element (i.e., 2P's first COMP)
head-comp-phrase-3 := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM [ INFOSTR-FLAG +,
                      LIGHT -,
                      LOCAL.CAT.VAL [ SUBJ < >,
                                      COMPS phlist ] ],
    NON-HEAD-DTR.SYNSEM.INFOSTR-FLAG - ].

high-nominalized-clause-phrase := unary-phrase &
  [ SYNSEM [ LOCAL [ CAT [ HEAD noun &
                                [ NMZ +,
                                  MOD < > ],
                           VAL [ SPR < [ OPT + ] >,
                                 COMPS < >,
                                 SUBJ < >,
                                 SPEC < > ] ],
                     COORD - ],
             NON-LOCAL #nl ],
    C-CONT [ RELS <! [ PRED "nominalized_rel",
                       LBL #ltop,
                       ARG0 ref-ind & #arg0,
                       ARG1 #arg1 ] !>,
             HCONS <! qeq &
                      [ HARG #arg1,
                        LARG #larg ] !>,
             HOOK [ XARG #xarg,
                    INDEX #arg0,
                    LTOP #ltop ] ],
    ARGS < [ SYNSEM [ NON-LOCAL #nl,
                      LOCAL [ CAT [ HEAD verb &
                                         [ NMZ + ],
                                    VAL [ COMPS < >,
                                          SUBJ < >,
                                          SPR < >,
                                          SPEC < > ] ],
                              CONT.HOOK [ XARG #xarg,
                                          LTOP #larg ],
                              COORD - ] ] ] > ].

;;; TODO: generated by GM, is this necessary?

non-event-subj-head-phrase := head-final-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

;;; TODO: ditto.

non-event-head-subj-phrase := head-initial-head-nexus & basic-head-subj-phrase &
  [ HEAD-DTR.SYNSEM [ LOCAL.CONT.HOOK.INDEX ref-ind,
                      NON-LOCAL [ QUE 0-dlist,
                                  REL 0-dlist ] ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPR < > ].

verbal-head-nexus := headed-phrase &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

;;; 2019-03-12 Removing "& na" from #mc. This was created by the V2 req in the GM I think. 
head-initial-head-nexus := head-initial &
  [ SYNSEM.LOCAL.CAT.MC #mc,
    HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

; removing MC na, also generated by V2 I think.
head-final-head-nexus := head-final &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.POSTHEAD - ].
;  [ SYNSEM.LOCAL.CAT.MC luk ].
;    HEAD-DTR.SYNSEM.LOCAL.CAT.MC na ].

;;; 2019-03-13 Defining daughter's comps as posthead or null,
;;; to prevent this from firing if there is a POSTHEAD - element (i.e., 2P's first COMP)
;;; 2019-03-19 I *think* HEAD should always be a clausal clitic: AUX + PRD +
head-subj-phrase := decl-head-subj-phrase & head-initial-head-nexus &
  [ HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD [ AUX +,
                                     PRD + ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRD -,
    SYNSEM.LOCAL.CAT.VAL.COMPS phlist ].

;;; 2019-03-12 constraining subj to be PRD -
subj-head-phrase := decl-head-subj-phrase & head-final-head-nexus &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.PRD - ].

comp-head-phrase := basic-head-1st-comp-phrase & head-final-head-nexus.

;;; 2019-03-13 Defining comps as posthead or null,
;;; to prevent this from firing if there is a POSTHEAD - element (i.e., 2P's first COMP)
comp-head-phrase-2 := basic-head-2nd-comp-phrase & head-final-head-nexus &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS phlist ].

poss-unary-phrase-1 := poss-unary-phrase &
  [ SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT -,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM possessum-1 ] ].

head-spec-phrase := head-initial & basic-head-spec-phrase &
  [ NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.SPEC < [ LOCAL.CAT.POSSESSUM #poss ] >,
    HEAD-DTR.SYNSEM.LOCAL.CAT.POSSESSUM #poss ].

;;; TODO: Fix this, POSS should introduce a REL, be an aux
poss-unary-phrase := basic-unary-phrase &
  [ SYNSEM.LOCAL [ CONT.HOOK #hook,
                   CAT [ HEAD det &
                              [ POSSESSOR possessor ],
                         VAL [ SPR < >,
                               COMPS < >,
                               SUBJ < >,
                               SPEC < [ LOCAL [ CAT [ VAL.COMPS < >,
                                                      HEAD noun &
                                                           [ PRON - ] ],
                                                CONT.HOOK #hook &
                                                          [ INDEX #possessum &
                                                                  [ COG-ST uniq-id ],
                                                            LTOP #lbl ] ] ] > ] ] ],
    C-CONT [ RELS <! arg12-ev-relation &
                     [ PRED "poss_rel",
                       LBL #lbl,
                       ARG1 #possessum,
                       ARG2 #possessor ], quant-relation &
                                          [ PRED "exist_q_rel",
                                            ARG0 #possessum,
                                            RSTR #harg ] !>,
             HCONS <! qeq &
                      [ HARG #harg,
                        LARG #lbl ] !>,
             ICONS <!  !> ],
    ARGS < [ SYNSEM.LOCAL [ CAT [ VAL [ SPR < >,
                                        COMPS < >,
                                        SUBJ < >,
                                        SPEC < > ],
                                  HEAD +np ],
                            CONT.HOOK.INDEX #possessor ] ] > ].

poss-unary-phrase-2 := poss-unary-phrase &
  [ SYNSEM.LOCAL.CAT [ HEAD.SPEC-INIT -,
                       VAL.SPEC.FIRST.LOCAL.CAT.POSSESSUM possessum-2 ] ].

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

n1-top-coord-rule := basic-n-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-mid-coord-rule := basic-n-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

n1-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

n2-top-coord-rule := basic-n-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

n2-bottom-coord-rule := conj-first-bottom-coord-rule & n-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

vp3-top-coord-rule := basic-vp-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-mid-coord-rule := basic-vp-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

vp3-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 5

s5-top-coord-rule := basic-s-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

s5-mid-coord-rule := basic-s-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

s5-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "5" ].

;;; -*- Mode: TDL; Coding: utf-8 -*-
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Grammar of Nuuchahnulth
;;; created at:
;;;     Wed Jul 26 22:48:05 UTC 2017
;;; based on Matrix customization system version of:
;;;     Tue Jul  4 20:47:47 UTC 2017
;;;
;;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Type assigning empty mod list. Added to basic types for nouns, verbs and determiners.

non-mod-lex-item := lex-item &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < > ].

;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Matrix Type Addenda
;;;;;;;;;;;;;;;;;;;;;;;;;

noun :+ [ CASE case ].

head :+ [ AUX bool,
    PRD bool,
    FORM form,
    SHAPE shape,
    SAT bool,
    SV bool ].

;;; 2017-08-02 stolen from ebender
cat-min :+ [ CLAUSAL bool ].

;;; 2017-08-07 from ebender
;;; TODO: VERBAL + needed?
verb :+ [ VERBAL + ].
	  
;;; 2017-08-07 from ebender
synsem-min :+ [ INST bool ].

inflected :+ [ ASPECT1-FLAG luk ].

infl-satisfied :+ [ ASPECT1-FLAG na-or-+ ].

png :+ [ PER person,
    NUM number ].

basic-head-comp-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc,
    SYNSEM.LOCAL.CAT [ MC #mc,
                       VC #vc ],
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.VC #vc ].

basic-head-mod-phrase-simple :+ [ SYNSEM.LOCAL.CAT.MC #mc,
    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.MC #mc ].

basic-head-opt-subj-phrase :+ [ HEAD-DTR.SYNSEM.LOCAL.CAT.VAL.COMPS < > ].

; Introducing VC keeps track whether main-verb is present in cluster

cat :+ [ VC luk ].

lex-rule :+ [ SYNSEM.LOCAL.CAT.VC #vc,
    DTR.SYNSEM.LOCAL.CAT.VC #vc ].

;;;;;;;;;;;;;;
;;; Features
;;;;;;;;;;;;;;

;;; Case

case := *top*.
nom := case.  ; nom
acc := case.  ; acc

;;; Person

person := *top*.
first := person.
second := person.
third := person.

;;; Number

number := *top*.
sg := number.
pl := number.

;;; Form

form := *top*.
nonfinite := form.
finite := form.

;;; 2017-08-02 DAI
;;; shape is for distinguishing root vs non-roots (ʕiniiƛ vs ʕiłč, etc)

shape := *top*.
root := shape.
non-root := shape.

;;; Tense

past := tense.
future := tense.

;;; Aspect

momentaneous := aspect.
iterative := aspect.
repetitive := aspect.
continuative := aspect.
durative := aspect.
inceptive := aspect.
graduative := aspect.

;;; Mood

strong := mood.
real := mood.
neutral := mood.
weak := mood.
definite := mood.
embedded := mood.
unknown := mood.
possible := mood.
hearsay := mood.
inferential := mood.
purposive := mood.
question := mood.
command := mood.
commandgo := mood.
commandcome := mood.
article := mood.
hearsayarticle := mood.

;;;;;;;;;;;;;;;;;;;
;;; Lexical Types
;;;;;;;;;;;;;;;;;;;

;;; Nouns


;;; DAI 2017-08-09 making XARG = INDEX
;;; following discussion at DELPH-IN 2017
;;; this is so that I can have 1 suffix verb lex rule
;;; (noun-sv & mod-sv ==> sv just picks up XARG)
noun-lex := basic-noun-lex & basic-one-arg & no-hcons-lex-item & non-mod-lex-item &
  [ ARG-ST < #spr >,
    SYNSEM.LOCAL [ CAT.VAL [ COMPS < >,
                           SUBJ < >,
                           SPEC < >,
                           SPR < #spr &
                                 [ LOCAL.CAT.HEAD det,
                                   OPT + ] > ],
                    CONT.HOOK [ XARG #xarg,
                    			INDEX #xarg ] ] ].


;;; DAI 2017-08-09 head-spec
;;; following discussion at DELPH-IN 2017
;;; this must always pass up the SPEC's COMPS list (modified in)
;;; matrix.tdl, in order to account for sentences like
;;; really-have=I red dog 'I really have a red dog'
;;; ʔiiḥnaaks ƛiḥ ʕiniiƛ
head-spec-phrase := basic-head-spec-phrase & head-initial.

persons-noun-lex := noun-lex.

common-noun-lex := noun-lex.

;;; Verbs

verb-lex := non-mod-lex-item & aspect2-rule-dtr & aspect3-rule-dtr &
  [ SYNSEM.LOCAL.CAT.HEAD verb ].

main-verb-lex := verb-lex & basic-verb-lex &
  [ SYNSEM.LOCAL [ CAT [ HEAD.AUX -,
                         VC +,
                         VAL [ SPR < >,
                               SPEC < >,
                               SUBJ < #subj > ] ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST.FIRST #subj &
                 [ LOCAL [ CAT.VAL [ SPR < >,
                                     COMPS < > ],
                           CONT.HOOK.INDEX #xarg ] ] ].

aux-lex := verb-lex &
  [ SYNSEM.LOCAL.CAT [ HEAD.AUX +,
                       VC - ] ].

intransitive-verb-lex := main-verb-lex & intransitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < >,
    ARG-ST.FIRST.LOCAL.CAT.HEAD noun ].

transitive-verb-lex := main-verb-lex & transitive-lex-item &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS < #comps >,
    ARG-ST < [ LOCAL.CAT.HEAD noun ],
             #comps &
             [ LOCAL.CAT [ VAL [ SPR < >,
                                 COMPS < > ],
                           HEAD noun ] ] > ].

nom-intransitive-verb-lex := intransitive-verb-lex &
  [ ARG-ST.FIRST.LOCAL.CAT.HEAD noun &
                                [ CASE nom ] ].

nom-acc-transitive-verb-lex := transitive-verb-lex &
  [ ARG-ST < [ LOCAL.CAT.HEAD noun &
                              [ CASE nom ] ],
             [ LOCAL.CAT.HEAD noun &
                              [ CASE acc ] ] > ].

verb-intransitive-verb-lex := nom-intransitive-verb-lex &
  [ INFLECTED.ASPECT1-FLAG - ].

verb-intransitive-verb-sat-lex := nom-intransitive-verb-lex &
  [ INFLECTED.ASPECT1-FLAG + ].

verb-transitive-verb-lex := nom-acc-transitive-verb-lex.

sentence-complements-verb-lex := nom-acc-transitive-verb-lex.

;;; Auxiliaries

subj-raise-aux := aux-lex & trans-first-arg-raising-lex-item &
  [ SYNSEM.LOCAL [ CAT.VAL [ SPR < >,
                             SPEC < >,
                             COMPS < #comps >,
                             SUBJ < #subj > ],
                   CONT.HOOK.XARG #xarg ],
    ARG-ST < #subj &
             [ LOCAL [ CAT [ HEAD noun &
                                  [ CASE #case ],
                             VAL [ SUBJ < >,
                                   SPR < >,
                                   SPEC < >,
                                   COMPS < > ] ],
                       CONT.HOOK.INDEX #xarg ] ],
             #comps &
             [ LOCAL.CAT [ HEAD verb &
                                [ AUX - ],
                           VAL [ COMPS < >,
                                 SPR < >,
                                 SPEC < >,
                                 SUBJ < unexpressed &
                                        [ LOCAL.CAT.HEAD.CASE #case ] > ] ] ] > ].

subj-raise-aux-with-pred := subj-raise-aux & norm-sem-lex-item & trans-first-arg-raising-lex-item-1.

neg-aux-lex := subj-raise-aux-with-pred &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD.FORM nonfinite ].

;;; Copulas

cop-lex := basic-verb-lex-super & trans-first-arg-raising-lex-item-2 &
  [ SYNSEM.LOCAL [ CAT.VAL [ SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                              CAT [ VAL [ SPR < >,
                                                          COMPS < > ],
                                                    HEAD noun ] ] ] >,
                             COMPS < [ LOCAL.CAT [ HEAD.PRD +,
                                                   VAL [ SUBJ < >,
                                                         COMPS < > ] ] ] >,
                             SPR < >,
                             SPEC < > ],
                   CONT.HOOK.XARG #xarg ] ].

; Copula type taking adjectival complements.
; Need to define more for additional complement types.

adj-comp-copula-verb-lex := cop-lex &
  [ SYNSEM.LOCAL.CAT.VAL.COMPS.FIRST.LOCAL.CAT.HEAD adj ].

copula-cop-lex := adj-comp-copula-verb-lex.

;;; Empty Roots
;;; DAI 2017-08-02

x-lex := intransitive-verb-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.SHAPE root ].

;;; Adjectives

adj-lex := basic-intersective-adjective-lex.

common-adj-lex := attr-adj-lex & stative-pred-adj-lex &
  [ SYNSEM.LOCAL.CAT [ POSTHEAD -,
                       HEAD.PRD - ] ].

; Basic attributive adjective definition
; DAI 2017-08-09 removed VAL.SPR cons from CAT. Why is this necessary?
attr-adj-lex := adj-lex & intersective-mod-lex &
  [ SYNSEM.LOCAL.CAT.HEAD.MOD < [ LOCAL.CAT [ HEAD noun ] ] > ].

; Stative predicate adjective definition

stative-pred-adj-lex := adj-lex &
  [ SYNSEM.LOCAL [ CAT.VAL.SUBJ < [ LOCAL [ CONT.HOOK.INDEX #xarg,
                                            CAT [ VAL [ SPR < >,
                                                        COMPS < > ],
                                                  HEAD noun ] ] ] >,
                   CONT.HOOK.XARG #xarg ] ].

;;;;;;;;;;;;;;;;;;;
;;; Lexical Rules
;;;;;;;;;;;;;;;;;;;

;;; Intermediate rule types

aspect2-rule-dtr := word-or-lexrule.
aspect3-rule-dtr := word-or-lexrule.

;;; Lexical rule types

aspect1-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED.ASPECT1-FLAG +,
    DTR verb-lex ].

verb-momentaneous-lex-rule := aspect1-lex-rule-super & aspect2-rule-dtr & aspect3-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT momentaneous ].

verb-durative-lex-rule := aspect1-lex-rule-super & aspect2-rule-dtr & aspect3-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT durative ].

verb-continuative-lex-rule := aspect1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT continuative ].

verb-repetitive-lex-rule := aspect1-lex-rule-super & aspect3-rule-dtr &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT repetitive ].

verb-iterative-lex-rule := aspect1-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT iterative ].

aspect2-lex-rule-super := add-only-no-ccont-rule & aspect3-rule-dtr & infl-lex-rule &
  [ INFLECTED #infl,
    DTR aspect2-rule-dtr &
        [ INFLECTED #infl ] ].

verb-graduative-lex-rule := aspect2-lex-rule-super &
  [ SYNSEM.LOCAL.CONT.HOOK.INDEX.E.ASPECT graduative ].

aspect3-lex-rule-super := add-only-no-ccont-rule & infl-lex-rule &
  [ INFLECTED #infl,
    DTR aspect3-rule-dtr &
        [ INFLECTED #infl ] ].

verb-momentaneous2-lex-rule := aspect3-lex-rule-super.

;;; SUFFIX VERBS AS CLITICS
;;; DAI 2017-08-08
;;; all the below stolen from ebender

periph-headed-unchanged := head-final &
  [ SYNSEM.L-PERIPH #lperiph,
    NON-HEAD-DTR.SYNSEM.L-PERIPH #lperiph ].

basic-sv+comp-rule := head-compositional & periph-headed-unchanged &
  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >,
  						   COMPS < > ],
    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD verb & [ SV + ],
    							VAL [ SUBJ < #subj >,
    								  COMPS < #comps > ] ],
    NON-HEAD-DTR.SYNSEM #comps & [ LOCAL.CAT.HEAD noun & [ SHAPE root ] ] ].

;;; DAI 2017-08-09 Not at all convinced the mod piping is correct.

;basic-sv+mod-rule := head-compositional & periph-headed-unchanged &
;  [   
;  ].



;;; OLD VERSION (here in case the new one goes sideways)
;basic-sv+mod-rule := head-compositional & periph-headed-unchanged &
;  [ SYNSEM.LOCAL.CAT.VAL [ SUBJ < #subj >,
;  						   COMPS < #comp & [ OPT - ] > ],
;    HEAD-DTR.SYNSEM.LOCAL.CAT [ HEAD verb & [ SV + ],
;    							VAL [ SUBJ < #subj >,
;    								  COMPS < # > ] ],
;    NON-HEAD-DTR.SYNSEM.LOCAL.CAT.HEAD.MOD < #comp > ].


;;; SUFFIX VERBS AS SUFFIXES
;;; DAI 2017-08-07

;suffix-verb-object-lex-rule := same-modified-lex-rule &
;		 					   same-light-lex-rule &
;					           same-non-local-lex-rule & 
;					           same-ctxt-lex-rule &
;					           same-agr-lex-rule &
;					           same-cont-lex-rule &
;  [
;  SYNSEM.LOCAL.CAT [ VAL [ COMPS < #comp >,
;  						   SUBJ < synsem-min >, 
;  						   SPR < >,
;  						   SPEC < > ]
;  					],
;  DTR #comp & [ SYNSEM.LOCAL [ CAT.HEAD noun ] ]
;  ].
;
;suffix-verb-mod-lex-rule := add-only-no-ccont-rule.
;
;;; CLITICS

;;; This is for the second position mood clitics
;;; This is taken mostly from Emily's Wambaya grammar
;;; Issues: Does SUBJ have to be HEAD NOUN? 
;;;       : Some way to make everything OPT + ?
;;;       : Removed Emily's SAT +/- business (probably needed)
;;;       : Have root shapes been constrained accurately?
;2nd-pos-clitic := lex-item &
;  [ SYNSEM [ LOCAL.CAT [ HEAD verb & [ AUX +,
;				     MOD <> ],
;		       VAL [ SUBJ < #subj >,
;			     COMPS < #comps . #vcomps >,
;			     SPR < >,
;			     SPEC < > ]]],
;    ARG-ST < #subj &
;	     [ OPT +,
;	       LOCAL [ CAT [ HEAD noun,
;			     VAL [ COMPS < > ]],
;		       CONT.HOOK.INDEX #xarg ]],
;	     #comps &
;	     [ OPT +,
;	       LOCAL [ CAT [ VAL [ SUBJ < #subj >,
;				   COMPS #vcomps ],
;			     HEAD verb  & [ SHAPE non-root ]
;			     ],
;		       CONT.HOOK.XARG #xarg ]] > ].


;;; DAI 2017-08-08 - really, does it need to apply prior to subject?
2nd-pos-clitic := lex-item &
  [ SYNSEM [ LOCAL.CAT [ HEAD verb & [ AUX +,
				       MOD <> ],
			 VC -,
			 VAL [ SUBJ.FIRST #subj ,
			       COMPS < #comps >,
			       SPR < >,
			       SPEC < > ]]],
    ARG-ST < #comps &
	     [ OPT -,
	       L-PERIPH +,
	       LOCAL [ CAT [ HEAD verb &
						 [ AUX - ],
						 VAL.SUBJ.FIRST #subj ]]] > ].

person-clitic := 2nd-pos-clitic & raise-sem-lex-item.

sg-clitic := person-clitic & 
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM sg ].
pl-clitic := person-clitic & 
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.NUM pl ].
first-person-clitic := person-clitic &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER first ].
second-person-clitic := person-clitic &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER second ].
third-person-clitic := person-clitic &
  [ SYNSEM.LOCAL.CAT.VAL.SUBJ.FIRST.LOCAL.CONT.HOOK.INDEX.PNG.PER third ].

first-sg-clitic := first-person-clitic & sg-clitic.
second-sg-clitic := second-person-clitic & sg-clitic.
first-pl-clitic := first-person-clitic & pl-clitic.
second-pl-clitic := second-person-clitic & pl-clitic.

;;;;;;;;;;;;;;;;;;;
;;; Phrasal Types
;;;;;;;;;;;;;;;;;;;

head-comp-phrase := basic-head-1st-comp-phrase & head-initial &
  [ HEAD-DTR.SYNSEM.L-PERIPH na-or-- ].

head-subj-phrase := decl-head-subj-phrase & head-initial &
  [ HEAD-DTR.SYNSEM [ L-PERIPH na-or--,
                      LOCAL.CAT.VC + ] ].

;;; DAI 2017-08-02 Necessary for clitics (& ONLY clitics!!)
;;; TODO: Stolen from ebender: investigate at later date
;;; DAI 2017-08-08 Not adding SUBJ to RELS, don't know why
comp-head-phrase := basic-head-1st-comp-phrase & head-final &
  [ SYNSEM.LOCAL.CAT [ CLAUSAL -,
                       HEAD verb & [ AUX + ]],
    HEAD-DTR [ KEY-ARG + ],
    NON-HEAD-DTR.SYNSEM.LOCAL [ CAT.HEAD.AUX - ]  ].

;Constraint on MC used to be part of matrix.tdl
;;it applies to all wo implementations, except for v2

; Bare NP phrase.  Consider modifying the PRED value of the quantifier relation
; introduced to match the semantic effect of bare NPs in your language.

bare-np-phrase := basic-bare-np-phrase &
  [ C-CONT.RELS <! [ PRED "exist_q_rel" ] !> ].

;;;;;;;;;;;;;;;;;;
;;; Coordination
;;;;;;;;;;;;;;;;;;

;;; Coordination Strategy 1

np1-top-coord-rule := basic-np-top-coord-rule & monopoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-mid-coord-rule := basic-np-mid-coord-rule & monopoly-mid-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

np1-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "1" ].

;;; Coordination Strategy 2

np2-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

np2-bottom-coord-rule := conj-first-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "2" ].

;;; Coordination Strategy 3

np3-top-coord-rule := basic-np-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "3" ].

np3-bottom-coord-rule := unary-bottom-coord-rule & np-bottom-coord-phrase &
  [ SYNSEM.LOCAL [ COORD-STRAT "3",
                   COORD-REL.PRED "_and_coord_rel" ] ].

;;; Coordination Strategy 4

vp4-top-coord-rule := basic-vp-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

vp4-bottom-coord-rule := conj-first-bottom-coord-rule & vp-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

;;; Coordination Strategy 4

s4-top-coord-rule := basic-s-top-coord-rule & apoly-top-coord-rule &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].

s4-bottom-coord-rule := conj-first-bottom-coord-rule & s-bottom-coord-phrase &
  [ SYNSEM.LOCAL.COORD-STRAT "4" ].
